generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// enum: opções de role do usuário
enum UserRole {
  STUDENT
  INSTRUCTOR
}

model User {
  id       String   @id @default(uuid())
  name     String
  email    String   @unique
  password String
  role     UserRole @default(STUDENT)

  // alterar para minusculo e plural - relacionamento com tabela[]
  questions Question[]
  answers   Answer[]

  // @map altera nome da tabela no DB
  @@map("users")
}

model Question {
  id           String    @id @default(uuid())
  title        String
  slug         String    @unique
  content      String
  // @map altera nome da coluna na tabela do DB
  createdAt    DateTime  @default(now()) @map("created_at")
  // @updatedAt sempre que question for atualizada ele atualiza automatico
  updatedAt    DateTime? @updatedAt @map("updated_at")
  authorId     String    @map("author_id")
  bestAnswerId String?   @unique @map("best_answer_id")

  // cria relacionamento com tabela User
  author     User     @relation(fields: [authorId], references: [id])
  bestAnswer Answer?  @relation("bestAnswer", fields: [bestAnswerId], references: [id])
  answers    Answer[]

  @@map("questions")
}

model Answer {
  id         String    @id @default(uuid())
  content    String
  // @map altera nome da coluna na tabela do DB
  createdAt  DateTime  @default(now()) @map("created_at")
  // @updatedAt sempre que question for atualizada ele atualiza automatico
  updatedAt  DateTime? @updatedAt @map("updated_at")
  authorId   String    @map("author_id")
  questionId String    @map("question_id")

  // cria relacionamento com tabela User
  author     User      @relation(fields: [authorId], references: [id])
  bestAnswer Question? @relation("bestAnswer")
  question   Question  @relation(fields: [questionId], references: [id])

  @@map("answers")
}
